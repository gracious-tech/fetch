#!/bin/bash
# Build client
set -e
cd "$(dirname "$(dirname "$0")")/client"


# PACKAGING LIBRARIES BEST PRACTICES
# Bundling: Bundle everything except ESM
#   Bundling ESM makes it harder to debug and exposes all the types from index. tsup is the best option but it also exposes types not useful to users. tsc isn't designed for bundling types, which is why tsup and others came up with own solutions. You should manually export types useful to users from the index, or otherwise get them to import from subdirs.
#   Do bundle other formats as otherwise imports get messy. TS doesn't transform import paths, and Node doesn't guess extenions in ESM mode. So imports need to include '.js' extension. But CJS requires .cjs when package is in "module" mode. It all just gets messy, and ESM is the future anyway...
#   Ignore the '.mjs' and '.cjs' extensions. They are not widely supported by tooling and may never be. Instead rely on package.json "exports" and "type": "module", to switch between them.


# Clear existing
rm -rf dist


# Build css
npx sass --style=compressed src/css/index.sass dist/client.css


# Common args
# NOTE Target must be suitable for browsers as well as Node18+
esbuild="npx esbuild --sourcemap --target=es6"


# Build cross-platform ESM with typings (the main format recommended to be used)
# NOTE Not bundling as apps should do themselves, and separate files easier for debugging and types
npx tsc --emitDeclarationOnly --outDir dist/esm
$esbuild src/*.ts --format=esm --platform=neutral --outdir=dist/esm


# Provide some other formats that may be useful for some people, but not recommended
# NOTE These formats aren't recommended, so not providing types or hosting for them etc.
$esbuild src/index.ts --bundle --format=cjs  --platform=node    --outfile=dist/bundled.cjs
$esbuild src/index.ts --bundle --format=esm  --platform=neutral --outfile=dist/bundled.mjs --minify
$esbuild src/index.ts --bundle --format=iife --platform=browser --outfile=dist/bundled.iife.js --minify --global-name=fetch_client
